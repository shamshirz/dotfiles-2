" Themes and colors
colorscheme onehalfdark

set t_Co=256

if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

set scrolloff=4    " Keep at least 4 lines below/above cursor
set nocompatible   " Don't maintain compatibilty with Vi

" Performance
set lazyredraw
set ttyfast

" Default focused
set relativenumber
set cursorline
set cursorcolumn

" Focused vs unfocused splits
autocmd WinEnter * set relativenumber
autocmd WinLeave * set norelativenumber

autocmd WinEnter * set cursorline
autocmd WinEnter * set cursorcolumn
autocmd WinLeave * set nocursorline
autocmd WinLeave * set nocursorcolumn

" Superior home/end mappings
map 0 ^
map - $

" Automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

nmap <leader>so :source $MYVIMRC<cr>

" Manually map window movement bindings set in vim-tmux-navigator as the same
" keys are mapped in the thoughtbot dotfiles and they interfere with the
" vim-tmux-navigator plugin when the .vimrc is re-sourced.
" https://github.com/christoomey/vim-tmux-navigator/issues/103
" https://github.com/christoomey/vim-tmux-navigator/blob/4e1a877f51a17a961b8c2a285ee80aebf05ccf42/plugin/tmux_navigator.vim#L19-L22
nnoremap <silent> <C-j> :TmuxNavigateDown<CR>
nnoremap <silent> <C-k> :TmuxNavigateUp<CR>
nnoremap <silent> <C-h> :TmuxNavigateLeft<CR>
nnoremap <silent> <C-l> :TmuxNavigateRight<CR>

" Change cursor to line when in insert mode
set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50
  \,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor
  \,sm:block-blinkwait175-blinkoff150-blinkon175
" https://github.com/neovim/neovim/wiki/FAQ#cursor-style-isnt-restored-after-exiting-nvim
au VimLeave * set guicursor=a:block-blinkon0

" Match to beginning and end of blocks with %
runtime macros/matchit.vim

set foldmethod=syntax " Fold using the wisdom of vim.ruby or similar
set nofoldenable      " Temporarily disable folding when file is first opened

" Bind `q` to close the buffer for help files
autocmd Filetype help nnoremap <buffer> q :q<CR>

" Disable inherited syntastic
let g:syntastic_mode_map = {
  \ "mode": "passive",
  \ "active_filetypes": [],
  \ "passive_filetypes": [] }

" Smart wrapping/indentation
set breakindent

" Explore the directory of the current file
nnoremap <leader>e :Dirvish %<CR>
" Explore the project root directory
nnoremap <leader>E :Dirvish .<CR>
" Enable Vim Fugitive in dirvish buffers
autocmd FileType dirvish call fugitive#detect(@%)

" Use ripgrep for ludicrous speed! Got this from
" https://elliotekj.com/2016/11/22/setup-ctrlp-to-use-ripgrep-in-vim/
set grepprg=rg\ --color=never

nnoremap \ :Rg <cr>'

let g:ackprg = 'rg --vimgrep --smart-case'

" Added sh*t to end of mapping to fix offset issue, per
" https://github.com/junegunn/fzf.vim/issues/385#issuecomment-418922152
nnoremap <silent> <C-p> :Files<CR><C-\><C-n>0i

" Prevents file names from being includes in full-text ripgrep search
" https://github.com/junegunn/fzf/issues/1109#issuecomment-339983902
command! -bang -nargs=* Rg
  \ call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
  \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
  \   <bang>0)

let g:markdown_fenced_languages = ['elixir', 'elm', 'rust', 'vim']

" Enable command history, as with Ctrl-P Vim plugin
let g:fzf_history_dir = '~/.local/share/fzf-history'

set wildignore+=*/.git/*,*/tmp/*,*.swp,*/deps/*

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

let g:elm_format_autosave = 0 " Don't format on saving an Elm file
let g:elm_setup_keybindings = 0 " Don't use plugin-provided mappings

" Dash.vim
nmap <silent> <leader>d <Plug>DashSearch

" Make test commands execute using dispatch.vim
let test#strategy = "dispatch"

" Allow mouse input for all modes
set mouse=a

" Behavior for substitutions preview (e.g. `s/hey/hi/`)
set inccommand=split

" ALE options
silent! augroup! ale

let g:ale_linters = {
\   'elixir': ['credo'],
\   'elm': [],
\ }

" Set soft tabs to 4 spaces in Elm buffers
" And don't wrap text
autocmd FileType elm setlocal tabstop=4 shiftwidth=4 wrapmargin=0 textwidth=0

" Clear search highlighting
nnoremap <silent> <Leader>n :noh<CR>

" Use j and k to navigate long wrapped lines as multiple lines
nnoremap k gk
nnoremap j gj

" Hide Vim mode below airline bar
set noshowmode

" Syntax highlighting was breaking with just `autocmd VimEnter * :source
" ./Session.vim`--this fixes it.
" https://stackoverflow.com/a/10525050/4413082
function! RestoreSession()
  if filereadable(getcwd() . '/Session.vim')
    execute 'source ' . getcwd() . '/Session.vim'
    if bufexists(1)
      for l in range(1, bufnr('$'))
        if bufwinnr(l) == -1
          exec 'sbuffer ' . l
        endif
      endfor
    endif
  endif
endfunction

autocmd VimEnter * :Obsession

" Vim Tagbar
nmap <C-\> :TagbarToggle<CR>

" Tagbar for Elixir
let g:tagbar_type_elixir = {
    \ 'ctagstype' : 'elixir',
    \ 'kinds' : [
        \ 'p:protocols',
        \ 'm:modules',
        \ 'e:exceptions',
        \ 'y:types',
        \ 'd:delegates',
        \ 'f:functions',
        \ 'c:callbacks',
        \ 'a:macros',
        \ 't:tests',
        \ 'i:implementations',
        \ 'o:operators',
        \ 'r:records'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 'p' : 'protocol',
        \ 'm' : 'module'
    \ },
    \ 'scope2kind' : {
        \ 'protocol' : 'p',
        \ 'module' : 'm'
    \ },
    \ 'sort' : 0
    \ }

" Tagbar for Elm
let g:tagbar_type_elm = {
      \ 'kinds' : [
      \ 'f:function:0:0',
      \ 'm:modules:0:0',
      \ 'i:imports:1:0',
      \ 't:types:1:0',
      \ 'a:type aliases:0:0',
      \ 'c:type constructors:0:0',
      \ 'p:ports:0:0',
      \ 's:functions:0:0',
      \ ]
      \}

" coc.vim ====================================================================="
" from https://github.com/neoclide/coc.nvim#example-vim-configuration
" ============================================================================="

" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[r` and `]r` to navigate diagnostics
nmap <silent> [r <Plug>(coc-diagnostic-prev)
nmap <silent> ]r <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Lightline integration
function! CocCurrentFunction()
    return get(b:, 'coc_current_function', '')
endfunction

let g:lightline = {
  \ 'colorscheme': 'onehalfdark',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'cocstatus', 'currentfunction', 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'component_function': {
  \   'cocstatus': 'coc#status',
  \   'currentfunction': 'CocCurrentFunction'
  \ },
\ }

"=============================================================================="

" Use `[g` and `]g` to navigate git hunks
nmap <silent> [g :GitGutterPrevHunk<CR>
nmap <silent> ]g :GitGutterNextHunk<CR>

" Copy relative file path of current buffer to clipboard
noremap <silent> cp :let @+=expand("%")<CR>
" Copy absolute file path of current buffer to clipboard
noremap <silent> cP :let @+=expand("%:p")<CR>

augroup dirvish_config
  " Maintain fzf Ctrl-P functionality in Dirvish buffers
  autocmd FileType dirvish nnoremap <silent><buffer> <C-p> :Files<CR><C-\><C-n>0i
augroup END

" Ensure compatibility with vim-fugitive
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

let g:slime_target = "tmux"

" Elixir formatting
autocmd FileType elixir setlocal textwidth=180

" Ensure per-file tests work in Elixir umbrella apps by using absolute paths
" https://github.com/janko-m/vim-test/issues/136
let test#filename_modifier = ":p"

" Resolve issue where linter compiles before Phoenix server does
" https://elixirforum.com/t/vim-interfering-with-phoenix-recompile-after-saving/10039/21
" This makes tests run through vim fail (e.g. vim-test with <leader>t)
let $MIX_ENV = 'edit'

" Use zsh (my default terminal) as the default terminal in nvim
set shell=/bin/zsh
